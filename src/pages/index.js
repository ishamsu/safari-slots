import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DateCalendar } from "@mui/x-date-pickers/DateCalendar";
import { useState } from "react";
import { Dialog, DialogTitle } from "@mui/material";
import Box from "@mui/material/Box";
import Tab from "@mui/material/Tab";
import TabContext from "@mui/lab/TabContext";
import TabList from "@mui/lab/TabList";
import TabPanel from "@mui/lab/TabPanel";
import { useRouter } from "next/router";
const inter = Inter({ subsets: ["latin"] });

const fetchCount = async (payload, id) => {
  return await axios
    .post(`api/seats/${id}`, payload, {
      headers: {
        "Content-Type": "application/json",
      },
    })
    .then((result) => {
      return result.data;
    });
};

const getTimeSlotVehicleCount = async (data, date, id) => {
  const parser = new DOMParser();
  const doc = parser.parseFromString(data, "text/html");
  const options = doc.querySelectorAll("#timeslots option");
  const timeslots = {};
  let ids = [];
  for (let i = 1; i < options.length; i++) {
    timeslots[options[i].value] = options[i].text;
    ids.push(options[i].text);
  }
  const vehicleCounts = await Promise.all(
    Object.keys(timeslots).map((item) => {
      return fetchCount(
        {
          timeslots: item,
          startSafari: date,
          transportation: "1",
        },
        id
      );
    })
  );
  const timeSlotVehicleCount = {
    result: {},
    timeslots: ids,
  };
  Object.values(timeslots).forEach((timeSlot, index) => {
    timeSlotVehicleCount.result[timeSlot] =
      vehicleCounts[index] >= 1 ? vehicleCounts[index] : 0;
  });
  console.log("first 1", ids, timeSlotVehicleCount);

  return timeSlotVehicleCount;
};
const fetchtweet = async (payload, isoDate, id) => {
  return await axios
    .post(`api/time-slot/${id}`, payload, {
      headers: {
        "Content-Type": "application/json",
      },
    })
    .then((result) => {
      return getTimeSlotVehicleCount(result.data, isoDate, id).then((data) => {
        console.log("first", data);
        return data;
      });
    })
    .catch((err) => {
      console.log(`error occured fetchtweet `, err);
      return err;
    });
};

const shouldDisableDate = (date) => {
  const today = new Date();
  const maxDate = new Date();
  maxDate.setDate(today.getDate() + 2); // Disable next 2 days
  return date < maxDate || date <= today;
};
const shouldDisableMonth = (date) => {
  const today = new Date();
  const currentMonth = today.getMonth();
  return new Date(date).getMonth() !== currentMonth;
};

export default function Home() {
  const [show, setShow] = useState("");
  const [show1, setShow1] = useState("");
  const [open, setOpen] = useState(false);
  const [dateShow, setDate] = useState("");
  const [value, setValue] = useState("1");
  const router = useRouter();

  const handleChange = (event, newValue) => {
    setValue(newValue);
    console.log("switch tab", newValue);
    const date = new Date(dateShow);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    const weekday = new Intl.DateTimeFormat("en-US", {
      weekday: "long",
    }).format(date);
    const formattedDate = `${year}-${month}-${day} ${weekday}`;
    console.log(formattedDate); // "2023-05-08 Monday"
    if (newValue == 1 && !show) {
      fetchtweet(
        {
          sarafiDate: formattedDate,
        },
        `${year}-${month}-${day}`,
        3
      ).then((res) => {
        console.log("final latest", res);
        setShow(res);
      });
    } else if (newValue == 2 && !show1) {
      fetchtweet(
        {
          sarafiDate: formattedDate,
        },
        `${year}-${month}-${day}`,
        5
      ).then((res) => {
        console.log("final latest", res);
        setShow1(res);
      });
    }
  };

  return (
    <>
      <Head>
        <title>Nagerhole safari date slots</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div
          style={{
            textAlign: "center",
            fontSize: "25px",
            fontWeight: 600,
            textDecoration: "underline",
          }}
        >
          Check available slots for nagarahole safari
        </div>
        <LocalizationProvider dateAdapter={AdapterDayjs}>
          <DateCalendar
            shouldDisableDate={shouldDisableDate}
            shouldDisableMonth={shouldDisableMonth}
            onChange={(x) => {
              setShow(false);
              setShow1(false);
              setValue("1");
              setDate(x);
              const date = new Date(x);
              const year = date.getFullYear();
              const month = String(date.getMonth() + 1).padStart(2, "0");
              const day = String(date.getDate()).padStart(2, "0");
              const weekday = new Intl.DateTimeFormat("en-US", {
                weekday: "long",
              }).format(date);
              const formattedDate = `${year}-${month}-${day} ${weekday}`;
              console.log(formattedDate); // "2023-05-08 Monday"
              console.log("time", `${year}-${month}-${day}`, new Date(x));
              fetchtweet(
                {
                  sarafiDate: formattedDate,
                },
                `${year}-${month}-${day}`,
                3
              ).then((res) => {
                console.log("final latest", res);
                setShow(res);
              });
              setOpen(true);
            }}
          />
        </LocalizationProvider>
        <div class="button-container">
          <p class="sibling-text">
            If you find your slot, visit{" "}
            <a href="https://tickets.nagaraholetigerreserve.com/">
              https://tickets.nagaraholetigerreserve.com/
            </a>{" "}
            to book your safari.
          </p>
          <button
            className="gradient-button"
            onClick={() => {
              window.open(
                "https://tickets.nagaraholetigerreserve.com/safaries",
                "_blank"
              );
            }}
          >
            Visit now
          </button>
        </div>



        


        <div className="why-text-container">
      <div className="why-text" onClick={()=>{router.push("/about-this-page");}}>
        <span role="img" aria-label="info" className="info-icon">
          ‚ÑπÔ∏è
        </span>
        <span className="why-text-label">Why I created this page</span>
      </div>
    </div>

        <Dialog
          onClose={() => {
            setOpen(false);
          }}
          open={open}
        >
          <DialogTitle style={{ fontWeight: 900 }}>
            Available slot for the day (bus)
          </DialogTitle>

          <Box sx={{ width: "100%", typography: "body1" }}>
            <TabContext value={value}>
              <Box sx={{ borderBottom: 1, borderColor: "divider" }}>
                <TabList
                  onChange={handleChange}
                  aria-label="lab API tabs example"
                >
                  <Tab label="Kakanakote (Kabini)" value="1" />
                  <Tab label="Nanachi Safari" value="2" />
                </TabList>
              </Box>
              <TabPanel value="1">
                {show && (
                  <div
                    style={{
                      display: "flex",
                      flexDirection: "column",
                      gap: 10,
                      alignItems:"center"
                    }}
                  >
                    {show?.timeslots.map((timeSlot) => (
                      <div
                        className="time-slot"
                        style={{
                          backgroundColor: timeSlot.includes("am")
                            ? "white"
                            : "black",
                          color: timeSlot.includes("am")
                            ? "#000000d9"
                            : "white",
                        }}
                        key={timeSlot}
                      >
                        <span className="time-slot-name">{timeSlot}</span>
                        <span
                          className="time-slot-count"
                          style={{
                            color: show.result[timeSlot] < 5 ? "red" : "green",
                          }}
                        >
                          {show.result[timeSlot]}
                        </span>
                        <div className="time-slot-chip">
                          {timeSlot.includes("am") ? "‚õÖ" : "üåú"}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </TabPanel>
              <TabPanel value="2">
                {show1 && (
                  <div
                    style={{
                      display: "flex",
                      flexDirection: "column",
                      gap: 10,
                      alignItems:"center"

                    }}
                  >
                    {show1?.timeslots.map((timeSlot) => (
                      <div
                        className="time-slot"
                        style={{
                          backgroundColor: timeSlot.includes("am")
                            ? "white"
                            : "black",
                          color: timeSlot.includes("am")
                            ? "#000000d9"
                            : "white",
                        }}
                        key={timeSlot}
                      >
                        <span className="time-slot-name">{timeSlot}</span>
                        <span
                          className="time-slot-count"
                          style={{
                            color: show1.result[timeSlot] < 5 ? "red" : "green",
                          }}
                        >
                          {show1.result[timeSlot]}
                        </span>
                        <div className="time-slot-chip">
                          {timeSlot.includes("am") ? "‚õÖ" : "üåú"}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </TabPanel>
            </TabContext>
          </Box>
        </Dialog>
      </main>
    </>
  );
}
