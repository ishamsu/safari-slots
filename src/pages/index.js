import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DateCalendar } from "@mui/x-date-pickers/DateCalendar";
import { useState } from "react";
import { Dialog, DialogTitle } from "@mui/material";
const inter = Inter({ subsets: ["latin"] });

const fetchCount = async (payload) => {
  return await axios
    .post(`api/count`, payload, {
      headers: {
        "Content-Type": "application/json",
      },
    })
    .then((result) => {
      return result.data;
    });
};

const getTimeSlotVehicleCount = async (data, date) => {
  const parser = new DOMParser();
  const doc = parser.parseFromString(data, "text/html");
  const options = doc.querySelectorAll("#timeslots option");
  const timeslots = {};

  for (let i = 1; i < options.length; i++) {
    timeslots[options[i].value] = options[i].text;
  }
  const vehicleCounts = await Promise.all(
    Object.keys(timeslots).map((item) => {
      return fetchCount({
        timeslots: item,
        startSafari: date,
        transportation: "1",
      });
    })
  );
  const timeSlotVehicleCount = {};
  Object.values(timeslots).forEach((timeSlot, index) => {
    timeSlotVehicleCount[timeSlot] = vehicleCounts[index]>=1 ?vehicleCounts[index] : 0;
  });
  return timeSlotVehicleCount;
};
const fetchtweet = async (payload,isoDate) => {
  return await axios
    .post(`api/hello`, payload, {
      headers: {
        "Content-Type": "application/json",
      },
    })
    .then((result) => {
      return getTimeSlotVehicleCount(result.data,isoDate ).then((data) => {
        return data;
      });
    })
    .catch((err) => {
      console.log(`error occured fetchtweet `, err);
      return err;
    });
};

const shouldDisableDate = (date) => {
  const today = new Date();
  const maxDate = new Date();
  maxDate.setDate(today.getDate() + 2); // Disable next 2 days
  return date < maxDate || date <= today;
};
const shouldDisableMonth = (date) => {
  const today = new Date();
  const currentMonth = today.getMonth();
  return new Date(date).getMonth() !== currentMonth;
};

export default function Home() {
  const [show, setShow] = useState("");
  const [open, setOpen] = useState(false);

  return (
    <>
      <Head>
        <title>Nagerhole safari date slots</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <div style={{textAlign:"center", fontSize:"25px", fontWeight:600, textDecoration:"underline"}}>Check available slots for nagerhole safari</div>
        <LocalizationProvider dateAdapter={AdapterDayjs}>
          <DateCalendar
            shouldDisableDate={shouldDisableDate}
            shouldDisableMonth={shouldDisableMonth}
            onChange={(x) => {
              setShow(false)
              let temp = new Date(x);
              const date = new Date(x);
              const year = date.getFullYear();
              const month = String(date.getMonth() + 1).padStart(2, "0");
              const day = String(date.getDate()).padStart(2, "0");
              const weekday = new Intl.DateTimeFormat("en-US", { weekday: "long" }).format(date);
              const formattedDate = `${year}-${month}-${day} ${weekday}`;
              console.log(formattedDate); // "2023-05-08 Monday"   
              console.log('time', `${year}-${month}-${day}`, new Date(x))
              fetchtweet({
                sarafiDate: formattedDate,
              },`${year}-${month}-${day}`).then((res) => {
                console.log("final latest", res);
                setShow(res);
              });
              setOpen(true)

            }}
          />
        </LocalizationProvider>

        <Dialog onClose={()=>{
                        setOpen(false)

        }} open={open}>
      <DialogTitle style={{fontWeight:900}}>Available slot for the day</DialogTitle>
      {show && (
          <div style={{display:"flex", flexDirection:"column", gap:10}}>
            {Object.entries(show).map(([timeSlot, count]) => (
            <div className="time-slot" style={{backgroundColor:timeSlot.includes("am") ? "white" :"black", color:timeSlot.includes("am") ? "#000000d9" :"white"}} key={timeSlot}>
              <span className="time-slot-name">{timeSlot}</span>
              <span className="time-slot-count" style={{color: count<5 ? "red": "green"}}>{count }</span>
              <div className="time-slot-chip">{timeSlot.includes("am") ? "â›…" : "ðŸŒœ"}</div>

            </div>
            ))}
          </div>
        )}
      </Dialog>

        
      </main>
    </>
  );
}
